#!/usr/bin/env node

/**
 * Module dependencies.
 */

// var app = require('../app');
var debug = require('debug')('ec:server');
// var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var app = require('express')();
// var router = app.Router();
var server = require('http').Server(app);
var io = require('socket.io')(server);

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// var user_number = 0;
// var room_number = 0;
var redis = require('redis');
var client = redis.createClient(); //creates a new client
// client.on('connect', function() {
//     console.log('connected');
// });

// client.get('user_number', function(err, reply) {
//     // console.log(reply);
//   if(err!=null){
//     client.set('user_number', 0);
    
//   };
// });


app.get('/', function (req, res) {

  client.get('user_number', function(err, user_number) {
    console.log('user_number:'+user_number);
    user_number++;
    var room_number = 0;
 
    if(user_number%2==0){
      room_number = user_number-1;
    }else{
      room_number = user_number;
    }
    client.set('user_number', user_number);
    
    client.set('room_number', room_number);
    res.writeHead(302, {
    'Location': room_number + '.html'
    //add other headers here...
    });
    res.end();

  });
  
});

app.get('/*.html', function (req, res) {

  req.connection.on('close',function(){    
       // code to handle connection abort
      console.log("close");
      io.on('connection', function(socket){
         // socket.join('some room');
         var msg = {text:"redriect"};
          socket.emit('chat1',  msg);
          socket.broadcast.emit('chat1', msg);
      
      });
    });

  client.get('room_number', function(err, room_number) {
  client.get('user_number', function(err, user_number) {



  res.writeHead(200, { 'content-type': 'text/html' });
  res.end(
                '<html><head>'+
                '<title>'+room_number+'</title>'+
                '<meta name="viewport" content="width=device-width, initial-scale=1.0">'+
                // '<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- fonts market mvp screen --><ins class="adsbygoogle" style="display:inline-block;width:300px;height:600px" data-ad-client="ca-pub-4296686011657304" data-ad-slot="5159309384"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script>'+
                '<link rel=stylesheet type="text/css" href="index.css">'+
                '<script src="https://cdn.socket.io/socket.io-1.2.0.js"></script>'+
                '<script src="http://code.jquery.com/jquery-1.11.1.js"></script>'+

                '</head>'+
               '<body>'+
                '<ul id="messages"></ul>'+
                '<form action="">'+
                '<input id="m" autocomplete="off" /><button>Send</button>'+
                '</form>'+
                // '<script src="index.js" />'+
                '<script>'+
      "var socket = io.connect();"+
      "$('form').submit(function(){"+
        "var msg = {user:"+user_number+",room:"+room_number+",text: $('#m').val()  };"+
 
        "socket.emit('chat', msg);"+
        "$('#m').val('');"+
        "return false;"+
      "});"+
      "socket.on('chat"+room_number+"', function(msg){"+
        "$('#messages').append($('<li>').text(msg.text));"+
      "});"+

    "</script>"+
      '</body></html>'
                
  );
});
});
});

app.get('/index.css', function (req, res) {
  res.sendfile(__dirname + '/index.css');
});
app.get('/index.js', function (req, res) {
  res.sendfile(__dirname + '/index.js');
  
});

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
// var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

io.on('connection', function(socket){
   socket.join('some room');
  // socket.join('room'+room_number);
  socket.on('chat', function(msg){
    console.log(msg);
    socket.emit('chat'+msg.room,  msg);
    socket.broadcast.emit('chat'+msg.room, msg);
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
